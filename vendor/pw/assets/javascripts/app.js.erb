var urlService = 'api/v1/';
var requestToken = null;
var requestPath = {
    sessions: 'sessions/user',
  	members: 'members',
  	articles: 'articles',
    products: 'products',
    productImages: 'product_images',
    articleImages: 'article_images',
  	pages: 'pages',
  	pageImages: 'page_images',
  	brands: 'brands',
  	banners: 'banners',
  	coupons: 'coupons',
};

var app = angular.module('pwAdminApp', ['ngAnimate', 'ngCookies', 'ngSanitize', 'ngCkeditor', 'ngTagsInput', 'ngFileUpload', 'ui.router', 'ngActivityIndicator', 'ui.bootstrap.modal', 'dropzone'])

	.run(function ($window, $rootScope, $location, $state, $cookies, Data, AuthService, Session) {
		$rootScope.$on('$stateChangeStart', function (event, next) {
            var isSecure = false;

            if (angular.isDefined(next.data.secure))
                isSecure = next.data.secure;

            console.log('Current state name: '+ next.name);

            // $rootScope.$state = next;
            // $rootScope.pageName = next.name;
            $rootScope.pageTitle = next.title;
            $rootScope.pageClass = next.data.pageClass;
            $rootScope.isAuthorized = AuthService.isAuthorized();

            // If no authorize token exist, we must redirect user to our public page
            if (isSecure) {
                if (AuthService.isAuthorized() == false) {
                    event.preventDefault();

                    $state.go('signin');
                    return false;
                }
            }
  		});
    });


angular.module('dropzone', []).directive('dropzone', function () {
  return function (scope, element, attrs) {
    var config, dropzone;

    config = scope[attrs.dropzone];

    // create a Dropzone for the element with the given options
    dropzone = new Dropzone(element[0], config.options);

    // bind the given event handlers
    angular.forEach(config.eventHandlers, function (handler, event) {
      dropzone.on(event, handler);
    });
  };
});

app.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);
